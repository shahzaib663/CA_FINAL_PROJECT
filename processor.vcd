$date
	Sat Dec 30 20:29:45 2023
$end
$version
	QuestaSim Version 2021.1
$end
$timescale
	1ns
$end

$scope module tb_processor $end

$scope module dut $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 # interupt $end
$var reg 1 $ rf_en $end
$var reg 1 % sel_pc $end
$var reg 1 & sel_opr_a $end
$var reg 1 ' sel_opr_b $end
$var reg 1 ( sel_m $end
$var reg 2 ) sel_wb [1:0] $end
$var reg 3 * imm_type [2:0] $end
$var reg 32 + pc_out [31:0] $end
$var reg 32 , inst [31:0] $end
$var reg 5 - rs2 [4:0] $end
$var reg 5 . rs1 [4:0] $end
$var reg 5 / rd [4:0] $end
$var reg 7 0 opcode [6:0] $end
$var reg 3 1 func3 [2:0] $end
$var reg 7 2 func7 [6:0] $end
$var reg 32 3 addr [31:0] $end
$var reg 32 4 wdata [31:0] $end
$var reg 32 5 rdata [31:0] $end
$var reg 32 6 rdata1 [31:0] $end
$var reg 32 7 rdata2 [31:0] $end
$var reg 4 8 aluop [3:0] $end
$var reg 32 9 imm [31:0] $end
$var reg 32 : opr_res [31:0] $end
$var reg 32 ; mux_out_pc [31:0] $end
$var reg 32 < mux_out_opr_a [31:0] $end
$var reg 32 = mux_out_opr_b [31:0] $end
$var reg 3 > br_type [2:0] $end
$var reg 1 ? br_taken $end
$var reg 1 @ rd_en $end
$var reg 1 A wr_en $end
$var reg 3 B mem_type [2:0] $end
$var reg 1 C tm_interupt $end
$var reg 1 D csr_rd $end
$var reg 1 E csr_wr $end
$var reg 32 F csr_rdata [31:0] $end
$var reg 32 G epc [31:0] $end
$var reg 1 H is_mret $end
$var reg 1 I epc_taken $end
$var reg 1 J excep $end
$var reg 32 K pc_out_reg [31:0] $end
$var reg 32 L inst_reg [31:0] $end
$var reg 5 M rs2_reg [4:0] $end
$var reg 5 N rs1_reg [4:0] $end
$var reg 5 O rd_reg [4:0] $end
$var reg 7 P opcode_reg [6:0] $end
$var reg 3 Q func3_reg [2:0] $end
$var reg 7 R func7_reg [6:0] $end
$var reg 32 S addr_reg [31:0] $end
$var reg 32 T wdata_reg [31:0] $end
$var reg 32 U rdata_reg [31:0] $end
$var reg 32 V rdata1_reg [31:0] $end
$var reg 32 W rdata2_reg [31:0] $end
$var reg 4 X aluop_reg [3:0] $end
$var reg 32 Y imm_reg [31:0] $end
$var reg 32 Z opr_res_reg [31:0] $end

$scope module PC_i $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 [ pc_in [31] $end
$var wire 1 \ pc_in [30] $end
$var wire 1 ] pc_in [29] $end
$var wire 1 ^ pc_in [28] $end
$var wire 1 _ pc_in [27] $end
$var wire 1 ` pc_in [26] $end
$var wire 1 a pc_in [25] $end
$var wire 1 b pc_in [24] $end
$var wire 1 c pc_in [23] $end
$var wire 1 d pc_in [22] $end
$var wire 1 e pc_in [21] $end
$var wire 1 f pc_in [20] $end
$var wire 1 g pc_in [19] $end
$var wire 1 h pc_in [18] $end
$var wire 1 i pc_in [17] $end
$var wire 1 j pc_in [16] $end
$var wire 1 k pc_in [15] $end
$var wire 1 l pc_in [14] $end
$var wire 1 m pc_in [13] $end
$var wire 1 n pc_in [12] $end
$var wire 1 o pc_in [11] $end
$var wire 1 p pc_in [10] $end
$var wire 1 q pc_in [9] $end
$var wire 1 r pc_in [8] $end
$var wire 1 s pc_in [7] $end
$var wire 1 t pc_in [6] $end
$var wire 1 u pc_in [5] $end
$var wire 1 v pc_in [4] $end
$var wire 1 w pc_in [3] $end
$var wire 1 x pc_in [2] $end
$var wire 1 y pc_in [1] $end
$var wire 1 z pc_in [0] $end
$var reg 32 { pc_out [31:0] $end
$upscope $end

$scope module inst_mem_i $end
$var wire 1 | addr [31] $end
$var wire 1 } addr [30] $end
$var wire 1 ~ addr [29] $end
$var wire 1 !! addr [28] $end
$var wire 1 "! addr [27] $end
$var wire 1 #! addr [26] $end
$var wire 1 $! addr [25] $end
$var wire 1 %! addr [24] $end
$var wire 1 &! addr [23] $end
$var wire 1 '! addr [22] $end
$var wire 1 (! addr [21] $end
$var wire 1 )! addr [20] $end
$var wire 1 *! addr [19] $end
$var wire 1 +! addr [18] $end
$var wire 1 ,! addr [17] $end
$var wire 1 -! addr [16] $end
$var wire 1 .! addr [15] $end
$var wire 1 /! addr [14] $end
$var wire 1 0! addr [13] $end
$var wire 1 1! addr [12] $end
$var wire 1 2! addr [11] $end
$var wire 1 3! addr [10] $end
$var wire 1 4! addr [9] $end
$var wire 1 5! addr [8] $end
$var wire 1 6! addr [7] $end
$var wire 1 7! addr [6] $end
$var wire 1 8! addr [5] $end
$var wire 1 9! addr [4] $end
$var wire 1 :! addr [3] $end
$var wire 1 ;! addr [2] $end
$var wire 1 <! addr [1] $end
$var wire 1 =! addr [0] $end
$var reg 32 >! data [31:0] $end
$upscope $end

$scope module inst_decode_i $end
$var wire 1 ?! inst [31] $end
$var wire 1 @! inst [30] $end
$var wire 1 A! inst [29] $end
$var wire 1 B! inst [28] $end
$var wire 1 C! inst [27] $end
$var wire 1 D! inst [26] $end
$var wire 1 E! inst [25] $end
$var wire 1 F! inst [24] $end
$var wire 1 G! inst [23] $end
$var wire 1 H! inst [22] $end
$var wire 1 I! inst [21] $end
$var wire 1 J! inst [20] $end
$var wire 1 K! inst [19] $end
$var wire 1 L! inst [18] $end
$var wire 1 M! inst [17] $end
$var wire 1 N! inst [16] $end
$var wire 1 O! inst [15] $end
$var wire 1 P! inst [14] $end
$var wire 1 Q! inst [13] $end
$var wire 1 R! inst [12] $end
$var wire 1 S! inst [11] $end
$var wire 1 T! inst [10] $end
$var wire 1 U! inst [9] $end
$var wire 1 V! inst [8] $end
$var wire 1 W! inst [7] $end
$var wire 1 X! inst [6] $end
$var wire 1 Y! inst [5] $end
$var wire 1 Z! inst [4] $end
$var wire 1 [! inst [3] $end
$var wire 1 \! inst [2] $end
$var wire 1 ]! inst [1] $end
$var wire 1 ^! inst [0] $end
$var reg 5 _! rd [4:0] $end
$var reg 5 `! rs1 [4:0] $end
$var reg 5 a! rs2 [4:0] $end
$var reg 7 b! opcode [6:0] $end
$var reg 3 c! func3 [2:0] $end
$var reg 7 d! func7 [6:0] $end
$upscope $end

$scope module reg_file_i $end
$var wire 1 ! clk $end
$var wire 1 e! rf_en $end
$var wire 1 f! rs2 [4] $end
$var wire 1 g! rs2 [3] $end
$var wire 1 h! rs2 [2] $end
$var wire 1 i! rs2 [1] $end
$var wire 1 j! rs2 [0] $end
$var wire 1 k! rs1 [4] $end
$var wire 1 l! rs1 [3] $end
$var wire 1 m! rs1 [2] $end
$var wire 1 n! rs1 [1] $end
$var wire 1 o! rs1 [0] $end
$var wire 1 p! rd [4] $end
$var wire 1 q! rd [3] $end
$var wire 1 r! rd [2] $end
$var wire 1 s! rd [1] $end
$var wire 1 t! rd [0] $end
$var wire 1 u! wdata [31] $end
$var wire 1 v! wdata [30] $end
$var wire 1 w! wdata [29] $end
$var wire 1 x! wdata [28] $end
$var wire 1 y! wdata [27] $end
$var wire 1 z! wdata [26] $end
$var wire 1 {! wdata [25] $end
$var wire 1 |! wdata [24] $end
$var wire 1 }! wdata [23] $end
$var wire 1 ~! wdata [22] $end
$var wire 1 !" wdata [21] $end
$var wire 1 "" wdata [20] $end
$var wire 1 #" wdata [19] $end
$var wire 1 $" wdata [18] $end
$var wire 1 %" wdata [17] $end
$var wire 1 &" wdata [16] $end
$var wire 1 '" wdata [15] $end
$var wire 1 (" wdata [14] $end
$var wire 1 )" wdata [13] $end
$var wire 1 *" wdata [12] $end
$var wire 1 +" wdata [11] $end
$var wire 1 ," wdata [10] $end
$var wire 1 -" wdata [9] $end
$var wire 1 ." wdata [8] $end
$var wire 1 /" wdata [7] $end
$var wire 1 0" wdata [6] $end
$var wire 1 1" wdata [5] $end
$var wire 1 2" wdata [4] $end
$var wire 1 3" wdata [3] $end
$var wire 1 4" wdata [2] $end
$var wire 1 5" wdata [1] $end
$var wire 1 6" wdata [0] $end
$var reg 32 7" rdata1 [31:0] $end
$var reg 32 8" rdata2 [31:0] $end
$upscope $end

$scope module controller_i $end
$var wire 1 9" br_taken $end
$var wire 1 :" opcode [6] $end
$var wire 1 ;" opcode [5] $end
$var wire 1 <" opcode [4] $end
$var wire 1 =" opcode [3] $end
$var wire 1 >" opcode [2] $end
$var wire 1 ?" opcode [1] $end
$var wire 1 @" opcode [0] $end
$var wire 1 A" func7 [6] $end
$var wire 1 B" func7 [5] $end
$var wire 1 C" func7 [4] $end
$var wire 1 D" func7 [3] $end
$var wire 1 E" func7 [2] $end
$var wire 1 F" func7 [1] $end
$var wire 1 G" func7 [0] $end
$var wire 1 H" func3 [2] $end
$var wire 1 I" func3 [1] $end
$var wire 1 J" func3 [0] $end
$var reg 1 K" rf_en $end
$var reg 1 L" rd_en $end
$var reg 1 M" wr_en $end
$var reg 1 N" sel_opr_a $end
$var reg 1 O" sel_opr_b $end
$var reg 1 P" sel_pc $end
$var reg 4 Q" aluop [3:0] $end
$var reg 3 R" br_type [2:0] $end
$var reg 3 S" mem_type [2:0] $end
$var reg 2 T" sel_wb [1:0] $end
$var reg 3 U" imm_type [2:0] $end
$var reg 1 V" csr_rd $end
$var reg 1 W" csr_wr $end
$var reg 1 X" is_mret $end
$upscope $end

$scope module alu_i $end
$var wire 1 Y" aluop [3] $end
$var wire 1 Z" aluop [2] $end
$var wire 1 [" aluop [1] $end
$var wire 1 \" aluop [0] $end
$var wire 1 ]" opr_a [31] $end
$var wire 1 ^" opr_a [30] $end
$var wire 1 _" opr_a [29] $end
$var wire 1 `" opr_a [28] $end
$var wire 1 a" opr_a [27] $end
$var wire 1 b" opr_a [26] $end
$var wire 1 c" opr_a [25] $end
$var wire 1 d" opr_a [24] $end
$var wire 1 e" opr_a [23] $end
$var wire 1 f" opr_a [22] $end
$var wire 1 g" opr_a [21] $end
$var wire 1 h" opr_a [20] $end
$var wire 1 i" opr_a [19] $end
$var wire 1 j" opr_a [18] $end
$var wire 1 k" opr_a [17] $end
$var wire 1 l" opr_a [16] $end
$var wire 1 m" opr_a [15] $end
$var wire 1 n" opr_a [14] $end
$var wire 1 o" opr_a [13] $end
$var wire 1 p" opr_a [12] $end
$var wire 1 q" opr_a [11] $end
$var wire 1 r" opr_a [10] $end
$var wire 1 s" opr_a [9] $end
$var wire 1 t" opr_a [8] $end
$var wire 1 u" opr_a [7] $end
$var wire 1 v" opr_a [6] $end
$var wire 1 w" opr_a [5] $end
$var wire 1 x" opr_a [4] $end
$var wire 1 y" opr_a [3] $end
$var wire 1 z" opr_a [2] $end
$var wire 1 {" opr_a [1] $end
$var wire 1 |" opr_a [0] $end
$var wire 1 }" opr_b [31] $end
$var wire 1 ~" opr_b [30] $end
$var wire 1 !# opr_b [29] $end
$var wire 1 "# opr_b [28] $end
$var wire 1 ## opr_b [27] $end
$var wire 1 $# opr_b [26] $end
$var wire 1 %# opr_b [25] $end
$var wire 1 &# opr_b [24] $end
$var wire 1 '# opr_b [23] $end
$var wire 1 (# opr_b [22] $end
$var wire 1 )# opr_b [21] $end
$var wire 1 *# opr_b [20] $end
$var wire 1 +# opr_b [19] $end
$var wire 1 ,# opr_b [18] $end
$var wire 1 -# opr_b [17] $end
$var wire 1 .# opr_b [16] $end
$var wire 1 /# opr_b [15] $end
$var wire 1 0# opr_b [14] $end
$var wire 1 1# opr_b [13] $end
$var wire 1 2# opr_b [12] $end
$var wire 1 3# opr_b [11] $end
$var wire 1 4# opr_b [10] $end
$var wire 1 5# opr_b [9] $end
$var wire 1 6# opr_b [8] $end
$var wire 1 7# opr_b [7] $end
$var wire 1 8# opr_b [6] $end
$var wire 1 9# opr_b [5] $end
$var wire 1 :# opr_b [4] $end
$var wire 1 ;# opr_b [3] $end
$var wire 1 <# opr_b [2] $end
$var wire 1 =# opr_b [1] $end
$var wire 1 ># opr_b [0] $end
$var reg 32 ?# opr_res [31:0] $end
$var reg 1 @# sra $end
$upscope $end

$scope module imm_gen_i $end
$var wire 1 A# inst [31] $end
$var wire 1 B# inst [30] $end
$var wire 1 C# inst [29] $end
$var wire 1 D# inst [28] $end
$var wire 1 E# inst [27] $end
$var wire 1 F# inst [26] $end
$var wire 1 G# inst [25] $end
$var wire 1 H# inst [24] $end
$var wire 1 I# inst [23] $end
$var wire 1 J# inst [22] $end
$var wire 1 K# inst [21] $end
$var wire 1 L# inst [20] $end
$var wire 1 M# inst [19] $end
$var wire 1 N# inst [18] $end
$var wire 1 O# inst [17] $end
$var wire 1 P# inst [16] $end
$var wire 1 Q# inst [15] $end
$var wire 1 R# inst [14] $end
$var wire 1 S# inst [13] $end
$var wire 1 T# inst [12] $end
$var wire 1 U# inst [11] $end
$var wire 1 V# inst [10] $end
$var wire 1 W# inst [9] $end
$var wire 1 X# inst [8] $end
$var wire 1 Y# inst [7] $end
$var wire 1 Z# inst [6] $end
$var wire 1 [# inst [5] $end
$var wire 1 \# inst [4] $end
$var wire 1 ]# inst [3] $end
$var wire 1 ^# inst [2] $end
$var wire 1 _# inst [1] $end
$var wire 1 `# inst [0] $end
$var wire 1 a# imm_type [2] $end
$var wire 1 b# imm_type [1] $end
$var wire 1 c# imm_type [0] $end
$var reg 32 d# imm [31:0] $end
$var reg 32 e# i_imm [31:0] $end
$var reg 32 f# j_imm [31:0] $end
$var reg 32 g# u_imm [31:0] $end
$var reg 32 h# b_imm [31:0] $end
$var reg 32 i# s_imm [31:0] $end
$upscope $end

$scope module Branch_comp_i $end
$var wire 1 j# br_type [2] $end
$var wire 1 k# br_type [1] $end
$var wire 1 l# br_type [0] $end
$var wire 1 m# opr_a [31] $end
$var wire 1 n# opr_a [30] $end
$var wire 1 o# opr_a [29] $end
$var wire 1 p# opr_a [28] $end
$var wire 1 q# opr_a [27] $end
$var wire 1 r# opr_a [26] $end
$var wire 1 s# opr_a [25] $end
$var wire 1 t# opr_a [24] $end
$var wire 1 u# opr_a [23] $end
$var wire 1 v# opr_a [22] $end
$var wire 1 w# opr_a [21] $end
$var wire 1 x# opr_a [20] $end
$var wire 1 y# opr_a [19] $end
$var wire 1 z# opr_a [18] $end
$var wire 1 {# opr_a [17] $end
$var wire 1 |# opr_a [16] $end
$var wire 1 }# opr_a [15] $end
$var wire 1 ~# opr_a [14] $end
$var wire 1 !$ opr_a [13] $end
$var wire 1 "$ opr_a [12] $end
$var wire 1 #$ opr_a [11] $end
$var wire 1 $$ opr_a [10] $end
$var wire 1 %$ opr_a [9] $end
$var wire 1 &$ opr_a [8] $end
$var wire 1 '$ opr_a [7] $end
$var wire 1 ($ opr_a [6] $end
$var wire 1 )$ opr_a [5] $end
$var wire 1 *$ opr_a [4] $end
$var wire 1 +$ opr_a [3] $end
$var wire 1 ,$ opr_a [2] $end
$var wire 1 -$ opr_a [1] $end
$var wire 1 .$ opr_a [0] $end
$var wire 1 /$ opr_b [31] $end
$var wire 1 0$ opr_b [30] $end
$var wire 1 1$ opr_b [29] $end
$var wire 1 2$ opr_b [28] $end
$var wire 1 3$ opr_b [27] $end
$var wire 1 4$ opr_b [26] $end
$var wire 1 5$ opr_b [25] $end
$var wire 1 6$ opr_b [24] $end
$var wire 1 7$ opr_b [23] $end
$var wire 1 8$ opr_b [22] $end
$var wire 1 9$ opr_b [21] $end
$var wire 1 :$ opr_b [20] $end
$var wire 1 ;$ opr_b [19] $end
$var wire 1 <$ opr_b [18] $end
$var wire 1 =$ opr_b [17] $end
$var wire 1 >$ opr_b [16] $end
$var wire 1 ?$ opr_b [15] $end
$var wire 1 @$ opr_b [14] $end
$var wire 1 A$ opr_b [13] $end
$var wire 1 B$ opr_b [12] $end
$var wire 1 C$ opr_b [11] $end
$var wire 1 D$ opr_b [10] $end
$var wire 1 E$ opr_b [9] $end
$var wire 1 F$ opr_b [8] $end
$var wire 1 G$ opr_b [7] $end
$var wire 1 H$ opr_b [6] $end
$var wire 1 I$ opr_b [5] $end
$var wire 1 J$ opr_b [4] $end
$var wire 1 K$ opr_b [3] $end
$var wire 1 L$ opr_b [2] $end
$var wire 1 M$ opr_b [1] $end
$var wire 1 N$ opr_b [0] $end
$var reg 1 O$ br_taken $end
$upscope $end

$scope module data_mem_i $end
$var wire 1 ! clk $end
$var wire 1 P$ rd_en $end
$var wire 1 Q$ wr_en $end
$var wire 1 R$ mem_type [2] $end
$var wire 1 S$ mem_type [1] $end
$var wire 1 T$ mem_type [0] $end
$var wire 1 U$ addr [31] $end
$var wire 1 V$ addr [30] $end
$var wire 1 W$ addr [29] $end
$var wire 1 X$ addr [28] $end
$var wire 1 Y$ addr [27] $end
$var wire 1 Z$ addr [26] $end
$var wire 1 [$ addr [25] $end
$var wire 1 \$ addr [24] $end
$var wire 1 ]$ addr [23] $end
$var wire 1 ^$ addr [22] $end
$var wire 1 _$ addr [21] $end
$var wire 1 `$ addr [20] $end
$var wire 1 a$ addr [19] $end
$var wire 1 b$ addr [18] $end
$var wire 1 c$ addr [17] $end
$var wire 1 d$ addr [16] $end
$var wire 1 e$ addr [15] $end
$var wire 1 f$ addr [14] $end
$var wire 1 g$ addr [13] $end
$var wire 1 h$ addr [12] $end
$var wire 1 i$ addr [11] $end
$var wire 1 j$ addr [10] $end
$var wire 1 k$ addr [9] $end
$var wire 1 l$ addr [8] $end
$var wire 1 m$ addr [7] $end
$var wire 1 n$ addr [6] $end
$var wire 1 o$ addr [5] $end
$var wire 1 p$ addr [4] $end
$var wire 1 q$ addr [3] $end
$var wire 1 r$ addr [2] $end
$var wire 1 s$ addr [1] $end
$var wire 1 t$ addr [0] $end
$var wire 1 u$ wdata [31] $end
$var wire 1 v$ wdata [30] $end
$var wire 1 w$ wdata [29] $end
$var wire 1 x$ wdata [28] $end
$var wire 1 y$ wdata [27] $end
$var wire 1 z$ wdata [26] $end
$var wire 1 {$ wdata [25] $end
$var wire 1 |$ wdata [24] $end
$var wire 1 }$ wdata [23] $end
$var wire 1 ~$ wdata [22] $end
$var wire 1 !% wdata [21] $end
$var wire 1 "% wdata [20] $end
$var wire 1 #% wdata [19] $end
$var wire 1 $% wdata [18] $end
$var wire 1 %% wdata [17] $end
$var wire 1 &% wdata [16] $end
$var wire 1 '% wdata [15] $end
$var wire 1 (% wdata [14] $end
$var wire 1 )% wdata [13] $end
$var wire 1 *% wdata [12] $end
$var wire 1 +% wdata [11] $end
$var wire 1 ,% wdata [10] $end
$var wire 1 -% wdata [9] $end
$var wire 1 .% wdata [8] $end
$var wire 1 /% wdata [7] $end
$var wire 1 0% wdata [6] $end
$var wire 1 1% wdata [5] $end
$var wire 1 2% wdata [4] $end
$var wire 1 3% wdata [3] $end
$var wire 1 4% wdata [2] $end
$var wire 1 5% wdata [1] $end
$var wire 1 6% wdata [0] $end
$var reg 32 7% rdata [31:0] $end
$upscope $end

$scope module csr_reg_i $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 8% addr [31] $end
$var wire 1 9% addr [30] $end
$var wire 1 :% addr [29] $end
$var wire 1 ;% addr [28] $end
$var wire 1 <% addr [27] $end
$var wire 1 =% addr [26] $end
$var wire 1 >% addr [25] $end
$var wire 1 ?% addr [24] $end
$var wire 1 @% addr [23] $end
$var wire 1 A% addr [22] $end
$var wire 1 B% addr [21] $end
$var wire 1 C% addr [20] $end
$var wire 1 D% addr [19] $end
$var wire 1 E% addr [18] $end
$var wire 1 F% addr [17] $end
$var wire 1 G% addr [16] $end
$var wire 1 H% addr [15] $end
$var wire 1 I% addr [14] $end
$var wire 1 J% addr [13] $end
$var wire 1 K% addr [12] $end
$var wire 1 L% addr [11] $end
$var wire 1 M% addr [10] $end
$var wire 1 N% addr [9] $end
$var wire 1 O% addr [8] $end
$var wire 1 P% addr [7] $end
$var wire 1 Q% addr [6] $end
$var wire 1 R% addr [5] $end
$var wire 1 S% addr [4] $end
$var wire 1 T% addr [3] $end
$var wire 1 U% addr [2] $end
$var wire 1 V% addr [1] $end
$var wire 1 W% addr [0] $end
$var wire 1 X% wdata [31] $end
$var wire 1 Y% wdata [30] $end
$var wire 1 Z% wdata [29] $end
$var wire 1 [% wdata [28] $end
$var wire 1 \% wdata [27] $end
$var wire 1 ]% wdata [26] $end
$var wire 1 ^% wdata [25] $end
$var wire 1 _% wdata [24] $end
$var wire 1 `% wdata [23] $end
$var wire 1 a% wdata [22] $end
$var wire 1 b% wdata [21] $end
$var wire 1 c% wdata [20] $end
$var wire 1 d% wdata [19] $end
$var wire 1 e% wdata [18] $end
$var wire 1 f% wdata [17] $end
$var wire 1 g% wdata [16] $end
$var wire 1 h% wdata [15] $end
$var wire 1 i% wdata [14] $end
$var wire 1 j% wdata [13] $end
$var wire 1 k% wdata [12] $end
$var wire 1 l% wdata [11] $end
$var wire 1 m% wdata [10] $end
$var wire 1 n% wdata [9] $end
$var wire 1 o% wdata [8] $end
$var wire 1 p% wdata [7] $end
$var wire 1 q% wdata [6] $end
$var wire 1 r% wdata [5] $end
$var wire 1 s% wdata [4] $end
$var wire 1 t% wdata [3] $end
$var wire 1 u% wdata [2] $end
$var wire 1 v% wdata [1] $end
$var wire 1 w% wdata [0] $end
$var wire 1 x% pc [31] $end
$var wire 1 y% pc [30] $end
$var wire 1 z% pc [29] $end
$var wire 1 {% pc [28] $end
$var wire 1 |% pc [27] $end
$var wire 1 }% pc [26] $end
$var wire 1 ~% pc [25] $end
$var wire 1 !& pc [24] $end
$var wire 1 "& pc [23] $end
$var wire 1 #& pc [22] $end
$var wire 1 $& pc [21] $end
$var wire 1 %& pc [20] $end
$var wire 1 && pc [19] $end
$var wire 1 '& pc [18] $end
$var wire 1 (& pc [17] $end
$var wire 1 )& pc [16] $end
$var wire 1 *& pc [15] $end
$var wire 1 +& pc [14] $end
$var wire 1 ,& pc [13] $end
$var wire 1 -& pc [12] $end
$var wire 1 .& pc [11] $end
$var wire 1 /& pc [10] $end
$var wire 1 0& pc [9] $end
$var wire 1 1& pc [8] $end
$var wire 1 2& pc [7] $end
$var wire 1 3& pc [6] $end
$var wire 1 4& pc [5] $end
$var wire 1 5& pc [4] $end
$var wire 1 6& pc [3] $end
$var wire 1 7& pc [2] $end
$var wire 1 8& pc [1] $end
$var wire 1 9& pc [0] $end
$var wire 1 :& csr_rd $end
$var wire 1 ;& csr_wr $end
$var wire 1 <& inst [31] $end
$var wire 1 =& inst [30] $end
$var wire 1 >& inst [29] $end
$var wire 1 ?& inst [28] $end
$var wire 1 @& inst [27] $end
$var wire 1 A& inst [26] $end
$var wire 1 B& inst [25] $end
$var wire 1 C& inst [24] $end
$var wire 1 D& inst [23] $end
$var wire 1 E& inst [22] $end
$var wire 1 F& inst [21] $end
$var wire 1 G& inst [20] $end
$var wire 1 H& inst [19] $end
$var wire 1 I& inst [18] $end
$var wire 1 J& inst [17] $end
$var wire 1 K& inst [16] $end
$var wire 1 L& inst [15] $end
$var wire 1 M& inst [14] $end
$var wire 1 N& inst [13] $end
$var wire 1 O& inst [12] $end
$var wire 1 P& inst [11] $end
$var wire 1 Q& inst [10] $end
$var wire 1 R& inst [9] $end
$var wire 1 S& inst [8] $end
$var wire 1 T& inst [7] $end
$var wire 1 U& inst [6] $end
$var wire 1 V& inst [5] $end
$var wire 1 W& inst [4] $end
$var wire 1 X& inst [3] $end
$var wire 1 Y& inst [2] $end
$var wire 1 Z& inst [1] $end
$var wire 1 [& inst [0] $end
$var wire 1 \& is_mret $end
$var wire 1 # tm_interupt $end
$var reg 32 ]& rdata [31:0] $end
$var reg 32 ^& epc [31:0] $end
$var reg 1 _& epc_taken $end
$var reg 1 `& excep $end
$var reg 32 a& mstatus_reg [31:0] $end
$var reg 32 b& mie_reg [31:0] $end
$var reg 32 c& mepc_reg [31:0] $end
$var reg 32 d& mip_reg [31:0] $end
$var reg 32 e& mstatus_comb [31:0] $end
$var reg 32 f& mie_comb [31:0] $end
$var reg 32 g& mepc_comb [31:0] $end
$var reg 32 h& mip_comb [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0$
0%
0&
0'
x(
b0 )
b0 *
bx +
bx ,
bx -
bx .
bx /
bx 0
bx 1
bx 2
bx 3
b0 4
bx 5
bx 6
bx 7
bx 8
bx 9
b0 :
bx ;
bx <
bx =
bx >
0?
0@
0A
bx B
xC
0D
0E
b0 F
bx G
xH
0I
0J
b0 K
b0 L
b0 M
b0 N
b0 O
b0 P
b0 Q
b0 R
b0 S
b0 T
b0 U
b0 V
b0 W
b0 X
b0 Y
b0 Z
bx {
bx >!
bx _!
bx `!
bx a!
bx b!
bx c!
bx d!
bx 7"
bx 8"
0K"
0L"
0M"
0N"
0O"
0P"
bx Q"
bx R"
bx S"
b0 T"
b0 U"
0V"
0W"
xX"
b0 ?#
x@#
bx d#
bx e#
bx0 f#
bx000000000000 g#
b0xxxxxxxxxxxxxxxxxxxxxxx0 h#
bx i#
0O$
bx 7%
b0 ]&
bx ^&
0_&
0`&
bx a&
bx b&
bx c&
bx d&
bx e&
bx f&
bx g&
bx h&
x#
1"
0!
x\&
x[&
xZ&
xY&
xX&
xW&
xV&
xU&
xT&
xS&
xR&
xQ&
xP&
xO&
xN&
xM&
xL&
xK&
xJ&
xI&
xH&
xG&
xF&
xE&
xD&
xC&
xB&
xA&
x@&
x?&
x>&
x=&
x<&
0;&
0:&
x9&
x8&
x7&
x6&
x5&
x4&
x3&
x2&
x1&
x0&
x/&
x.&
x-&
x,&
x+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
xm%
xl%
xk%
xj%
xi%
xh%
xg%
xf%
xe%
xd%
xc%
xb%
xa%
x`%
x_%
x^%
x]%
x\%
x[%
xZ%
xY%
xX%
0W%
0V%
0U%
0T%
0S%
0R%
0Q%
0P%
0O%
0N%
0M%
0L%
0K%
0J%
0I%
0H%
0G%
0F%
0E%
0D%
0C%
0B%
0A%
0@%
0?%
0>%
0=%
0<%
0;%
0:%
09%
08%
x6%
x5%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
x-%
x,%
x+%
x*%
x)%
x(%
x'%
x&%
x%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
0t$
0s$
0r$
0q$
0p$
0o$
0n$
0m$
0l$
0k$
0j$
0i$
0h$
0g$
0f$
0e$
0d$
0c$
0b$
0a$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
xT$
xS$
xR$
0Q$
0P$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
xF$
xE$
xD$
xC$
xB$
xA$
x@$
x?$
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
xl#
xk#
xj#
0c#
0b#
0a#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
09"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
xt!
xs!
xr!
xq!
xp!
xo!
xn!
xm!
xl!
xk!
xj!
xi!
xh!
xg!
xf!
0e!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
x6!
x5!
x4!
x3!
x2!
x1!
x0!
x/!
x.!
x-!
x,!
x+!
x*!
x)!
x(!
x'!
x&!
x%!
x$!
x#!
x"!
x!!
x~
x}
x|
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
$end
#5
1!
b0 <
b0 =
b0 {
b0 +
09&
08&
07&
06&
05&
04&
03&
02&
01&
00&
0/&
0.&
0-&
0,&
0+&
0*&
0)&
0(&
0'&
0&&
0%&
0$&
0#&
0"&
0!&
0~%
0}%
0|%
0{%
0z%
0y%
0x%
0=!
0<!
0;!
0:!
09!
08!
07!
06!
05!
04!
03!
02!
01!
00!
0/!
0.!
0-!
0,!
0+!
0*!
0)!
0(!
0'!
0&!
0%!
0$!
0#!
0"!
0!!
0~
0}
0|
0N$
0M$
0L$
0K$
0J$
0I$
0H$
0G$
0F$
0E$
0D$
0C$
0B$
0A$
0@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
04$
03$
02$
01$
00$
0/$
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0|#
0{#
0z#
0y#
0x#
0w#
0v#
0u#
0t#
0s#
0r#
0q#
0p#
0o#
0n#
0m#
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
b10100010111000011101011 >!
b100 ;
b10100010111000011101011 ,
0z
0y
1x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
1[&
1Z&
0Y&
1X&
0W&
1V&
1U&
1T&
0S&
0R&
0Q&
0P&
1O&
1N&
1M&
0L&
1K&
0J&
0I&
0H&
1G&
0F&
1E&
0D&
0C&
0B&
0A&
0@&
0?&
0>&
0=&
0<&
1^!
1]!
0\!
1[!
0Z!
1Y!
1X!
1W!
0V!
0U!
0T!
0S!
1R!
1Q!
1P!
0O!
1N!
0M!
0L!
0K!
1J!
0I!
1H!
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
b0 d!
b101 a!
b10 `!
b111 c!
b1 _!
b1101011 b!
b1101011 0
b1 /
b111 1
b10 .
b101 -
b0 2
1t!
0s!
0r!
0q!
0p!
0G"
0F"
0E"
0D"
0C"
0B"
0A"
1j!
0i!
1h!
0g!
0f!
0o!
1n!
0m!
0l!
0k!
1J"
1I"
1H"
1@"
1?"
0>"
1="
0<"
1;"
1:"
1`#
1_#
0^#
1]#
0\#
1[#
1Z#
1Y#
0X#
0W#
0V#
0U#
1T#
1S#
1R#
0Q#
1P#
0O#
0N#
0M#
1L#
0K#
1J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
b101 e#
b10100010111 g#
b10100010111000000000000 g#
b10111100000000100 f#
b100000000000 h#
b1 i#
b1 7"
b0 8"
1M"
1K"
b0 Q"
1P"
1%
b0 8
1$
1A
b0 7
b1 6
1e!
1Q$
1w%
0v%
0u%
0t%
0s%
0r%
0q%
0p%
0o%
0n%
0m%
0l%
0k%
0j%
0i%
0h%
0g%
0f%
0e%
0d%
0c%
0b%
0a%
0`%
0_%
0^%
0]%
0\%
0[%
0Z%
0Y%
0X%
06%
05%
04%
03%
02%
01%
00%
0/%
0.%
0-%
0,%
0+%
0*%
0)%
0(%
0'%
0&%
0%%
0$%
0#%
0"%
0!%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0\"
0["
0Z"
0Y"
b0 ;
b101 d#
b101 9
0x
#10
0"
0!
#15
1#
1!
bx1xxx e&
bx1xxxxxxx f&
bx1xxxxxxx h&
1`&
1J
b10100010111000011101011 L
b101 M
b10 N
b1 O
b1101011 P
b111 Q
bx S
bx U
b1 V
b101 Y
#20
0#
0!
bx e&
bx f&
bx h&
0`&
0J
#25
1!
b1 <
1.$
1|"
b1 ?#
b1 :
1W%
1t$
b1 ;
b1 4
16"
1z
#30
0!
#35
1!
b1 {
b1 K
b1 T
b1 Z
b1 +
19&
1=!
#40
0!
#45
1!
#50
0!
#55
1!
#60
0!
#65
1!
#70
0!
#75
1!
#80
0!
#85
1!
#90
0!
#95
1!
#100
0!
#105
1!
#110
0!
#115
1!
#120
0!
#125
1!
#130
0!
#135
1!
#140
0!
#145
1!
#150
0!
#155
1!
#160
0!
#165
1!
#170
0!
#175
1!
#180
0!
#185
1!
#190
0!
#195
1!
#200
0!
#205
1!
#210
0!
#215
1!
#220
0!
#225
1!
#230
0!
#235
1!
#240
0!
#245
1!
#250
0!
#255
1!
#260
0!
#265
1!
#270
0!
#275
1!
#280
0!
#285
1!
#290
0!
#295
1!
#300
0!
#305
1!
#310
0!
#315
1!
#320
0!
#325
1!
#330
0!
#335
1!
#340
0!
#345
1!
#350
0!
#355
1!
#360
0!
#365
1!
#370
0!
#375
1!
#380
0!
#385
1!
#390
0!
#395
1!
#400
0!
#405
1!
#410
0!
#415
1!
#420
0!
#425
1!
#430
0!
#435
1!
#440
0!
#445
1!
#450
0!
#455
1!
#460
0!
#465
1!
#470
0!
#475
1!
#480
0!
#485
1!
#490
0!
#495
1!
#500
0!
#505
1!
#510
0!
#515
1!
#520
0!
#525
1!
#530
0!
#535
1!
#540
0!
#545
1!
#550
0!
#555
1!
#560
0!
#565
1!
#570
0!
#575
1!
#580
0!
#585
1!
#590
0!
#595
1!
#600
0!
#605
1!
#610
0!
#615
1!
#620
0!
#625
1!
#630
0!
#635
1!
#640
0!
#645
1!
#650
0!
#655
1!
#660
0!
#665
1!
#670
0!
#675
1!
#680
0!
#685
1!
#690
0!
#695
1!
#700
0!
#705
1!
#710
0!
#715
1!
#720
0!
#725
1!
#730
0!
#735
1!
#740
0!
#745
1!
#750
0!
#755
1!
#760
0!
#765
1!
#770
0!
#775
1!
#780
0!
#785
1!
#790
0!
#795
1!
#800
0!
#805
1!
#810
0!
#815
1!
#820
0!
#825
1!
#830
0!
#835
1!
#840
0!
#845
1!
#850
0!
#855
1!
#860
0!
#865
1!
#870
0!
#875
1!
#880
0!
#885
1!
#890
0!
#895
1!
#900
0!
#905
1!
#910
0!
#915
1!
#920
0!
#925
1!
#930
0!
#935
1!
#940
0!
#945
1!
#950
0!
#955
1!
#960
0!
#965
1!
#970
0!
#975
1!
#980
0!
#985
1!
#990
0!
#995
1!
#1000
0!
#1005
1!
#1010
0!
#1015
1!
